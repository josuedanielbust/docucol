name: docucol

services:
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
    ports:
      - "3000:3000"
    networks:
      - docucol-network
    depends_on:
      - users-api
      - document-api
      - interop-api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=${PORT}"
      
  # Database services (existing)
  # API Gateway
  traefik:
    image: traefik:v2.11
    command:
      - "--api.insecure=true"  # Enable dashboard (disable in production)
      - "--providers.docker=true"  # Enable Docker provider
      - "--providers.docker.exposedbydefault=false"  # Don't expose by default
      - "--entrypoints.web.address=:80"  # Define web entrypoint
      - "--entrypoints.websecure.address=:443"  # Define secure web entrypoint
      - "--accesslog=true"  # Enable access logs
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
      - "8080:8080"  # Dashboard (disable in production)
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - docucol-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.docucol.local`)"
      - "traefik.http.routers.dashboard.service=api@internal"

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - docucol-network
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis service for caching and session management
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - docucol-network
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Documents API service
  document-postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - document-postgres_data:/var/lib/postgresql/data
    networks:
      - docucol-network
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3
  
  document-api:
    build:
      context: ../document-api
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@document-postgres:5432/${POSTGRES_DB}?schema=public
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
      - PORT=${PORT}
      # MinIO configuration
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_USE_SSL=false
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BUCKET=${MINIO_BUCKET:-docucol}
      - STORAGE_PUBLIC_URL=http://storage.docucol.local
    depends_on:
      document-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - docucol-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.documents.rule=PathPrefix(`/documents`)"
      - "traefik.http.services.documents.loadbalancer.server.port=${PORT}"
      - "traefik.http.middlewares.documents-stripprefix.stripprefix.prefixes=/documents"
      - "traefik.http.routers.documents.middlewares=documents-stripprefix"

  # MinIO service for object storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    networks:
      - docucol-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      - "traefik.enable=true"
      # API service configuration
      - "traefik.http.routers.minio-api.rule=Host(`minio.docucol.local`) || PathPrefix(`/storage`)"
      - "traefik.http.services.minio-api-service.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-api.service=minio-api-service"
      - "traefik.http.middlewares.storage-path-rewrite.replacepathregex.regex=^/storage/(.*)"
      - "traefik.http.middlewares.storage-path-rewrite.replacepathregex.replacement=/${MINIO_BUCKET:-docucol}/$1"
      - "traefik.http.routers.minio-api.middlewares=storage-path-rewrite@docker"
      # Console service configuration
      - "traefik.http.routers.minio-console.rule=Host(`minio-console.docucol.local`)"
      - "traefik.http.services.minio-console-service.loadbalancer.server.port=9001"
      - "traefik.http.routers.minio-console.service=minio-console-service"

  # Users API service
  users-postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - user-postgres_data:/var/lib/postgresql/data
    networks:
      - docucol-network
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3

  users-api:
    build:
      context: ../users-api
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@users-postgres:5432/${POSTGRES_DB}?schema=public
      - PORT=${PORT}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
      - RABBITMQ_QUEUE=docucol_events
    depends_on:
      users-postgres:
        condition: service_healthy
    networks:
      - docucol-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.users.rule=PathPrefix(`/users`)"
      - "traefik.http.services.users.loadbalancer.server.port=${PORT}"
      - "traefik.http.middlewares.users-stripprefix.stripprefix.prefixes=/users"
      - "traefik.http.routers.users.middlewares=users-stripprefix"

  # Interop API service
  interop-api:
    build:
      context: ../interop-api
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - API_BASE_URL=http://interop-api:${PORT}/interop
      - USERS_API_URL=http://users-api:${PORT}
      - DOCUMENT_API_URL=http://document-api:${PORT}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
      - RABBITMQ_QUEUE=docucol_events
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GOV_CARPETA_BASE_URL=https://govcarpeta-apis-4905ff3c005b.herokuapp.com/apis
      - OPERATOR_ID=68056ec327d25f0015076aba
      - OPERATOR_NAME=DocuCol
    depends_on:
      - redis
    networks:
      - docucol-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.interop.rule=PathPrefix(`/interop`)"
      - "traefik.http.services.interop.loadbalancer.server.port=${PORT}"
      - "traefik.http.middlewares.interop-stripprefix.stripprefix.prefixes=/interop"
      - "traefik.http.routers.interop.middlewares=interop-stripprefix"

  # Notifications API service
  notifications-api:
    build:
      context: ../notifications-api
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
      - RABBITMQ_QUEUE=docucol_events
      - OPERATOR_NAME=DocuCol
      - SMTP_HOST=${SMTP_HOST:-mailhog}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_DEFAULT_FROM=DocuCol Notifications <notifications@docucol.com>
      - SMTP_REJECT_UNAUTHORIZED=true
      - EMAIL_TEMPLATE_DIR=./src/templates/emails
    depends_on:
      rabbitmq:
        condition: service_healthy
      mailhog:
        condition: service_healthy
    networks:
      - docucol-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notifications.rule=PathPrefix(`/notifications`)"
      - "traefik.http.services.notifications.loadbalancer.server.port=${PORT}"
      - "traefik.http.middlewares.notifications-stripprefix.stripprefix.prefixes=/notifications"
      - "traefik.http.routers.notifications.middlewares=notifications-stripprefix"

  # MailHog service for email testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP server port
      - "8025:8025"  # Web UI port
    networks:
      - docucol-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailhog.rule=Host(`mail.docucol.local`)"
      - "traefik.http.services.mailhog.loadbalancer.server.port=8025"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8025"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  document-postgres_data:
  user-postgres_data:
  minio_data:
  redis_data:

networks:
  docucol-network:
    driver: bridge
